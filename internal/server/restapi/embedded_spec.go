// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Client API",
    "version": "1.0"
  },
  "basePath": "/api/v1.0",
  "paths": {
    "/ports": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "get ports",
        "operationId": "getAllPorts",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/cursor"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "$ref": "#/definitions/Port"
              }
            }
          },
          "500": {
            "description": "General server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "post ports",
        "operationId": "postPorts",
        "parameters": [
          {
            "type": "file",
            "description": "The file to upload",
            "name": "file",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Argument",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "General server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "internal status code",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Port": {
      "description": "port object",
      "type": "object",
      "properties": {
        "alias": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "description": "port city",
          "type": "string"
        },
        "code": {
          "description": "port country",
          "type": "string"
        },
        "coordinates": {
          "description": "port coordinates",
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "country": {
          "description": "port country",
          "type": "string"
        },
        "name": {
          "description": "port name",
          "type": "string"
        },
        "province": {
          "description": "port province",
          "type": "string"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timezone": {
          "description": "port timezone",
          "type": "string"
        },
        "unlocs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "cursor": {
      "type": "integer",
      "default": 0,
      "description": "number of elements to skip",
      "name": "skip",
      "in": "query",
      "allowEmptyValue": true
    },
    "limit": {
      "type": "integer",
      "default": 10,
      "description": "number of elements to return.",
      "name": "limit",
      "in": "query",
      "allowEmptyValue": true
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Client API",
    "version": "1.0"
  },
  "basePath": "/api/v1.0",
  "paths": {
    "/ports": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "get ports",
        "operationId": "getAllPorts",
        "parameters": [
          {
            "type": "integer",
            "default": 10,
            "description": "number of elements to return.",
            "name": "limit",
            "in": "query",
            "allowEmptyValue": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "number of elements to skip",
            "name": "skip",
            "in": "query",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "$ref": "#/definitions/Port"
              }
            }
          },
          "500": {
            "description": "General server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "summary": "post ports",
        "operationId": "postPorts",
        "parameters": [
          {
            "type": "file",
            "description": "The file to upload",
            "name": "file",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Argument",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "General server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "internal status code",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Port": {
      "description": "port object",
      "type": "object",
      "properties": {
        "alias": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "description": "port city",
          "type": "string"
        },
        "code": {
          "description": "port country",
          "type": "string"
        },
        "coordinates": {
          "description": "port coordinates",
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "country": {
          "description": "port country",
          "type": "string"
        },
        "name": {
          "description": "port name",
          "type": "string"
        },
        "province": {
          "description": "port province",
          "type": "string"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timezone": {
          "description": "port timezone",
          "type": "string"
        },
        "unlocs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "parameters": {
    "cursor": {
      "type": "integer",
      "default": 0,
      "description": "number of elements to skip",
      "name": "skip",
      "in": "query",
      "allowEmptyValue": true
    },
    "limit": {
      "type": "integer",
      "default": 10,
      "description": "number of elements to return.",
      "name": "limit",
      "in": "query",
      "allowEmptyValue": true
    }
  }
}`))
}
