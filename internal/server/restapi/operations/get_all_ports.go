// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllPortsHandlerFunc turns a function with the right signature into a get all ports handler
type GetAllPortsHandlerFunc func(GetAllPortsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllPortsHandlerFunc) Handle(params GetAllPortsParams) middleware.Responder {
	return fn(params)
}

// GetAllPortsHandler interface for that can handle valid get all ports params
type GetAllPortsHandler interface {
	Handle(GetAllPortsParams) middleware.Responder
}

// NewGetAllPorts creates a new http.Handler for the get all ports operation
func NewGetAllPorts(ctx *middleware.Context, handler GetAllPortsHandler) *GetAllPorts {
	return &GetAllPorts{Context: ctx, Handler: handler}
}

/*GetAllPorts swagger:route GET /ports getAllPorts

get ports

*/
type GetAllPorts struct {
	Context *middleware.Context
	Handler GetAllPortsHandler
}

func (o *GetAllPorts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllPortsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
